{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HeW_F3FcJhpo"
      },
      "outputs": [],
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras import datasets, layers, models\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers as L\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "import seaborn as sns\n",
        "from keras.utils import np_utils"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#imports\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense, Dropout, Flatten, Activation\n",
        "from keras.layers import Conv2D, GlobalAveragePooling2D\n",
        "from keras.utils import np_utils\n",
        "import sklearn.metrics as metrics\n",
        "from keras.layers import BatchNormalization"
      ],
      "metadata": {
        "id": "9P35UXL8LDIK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#train EMNIST-Letter. Get best results. Then recompile with different learning rate and fit it to caroline's data. \n",
        "\n",
        "\n",
        "model = Sequential()\n",
        "\n",
        "model.add(Conv2D(filters=96, kernel_size=(3,3), padding = 'same', activation='relu',\\\n",
        "                 input_shape=(28, 28,1)))\n",
        "model.add(BatchNormalization())\n",
        "model.add(Conv2D(filters=96, kernel_size=(3,3) , padding = 'same', activation='relu'))\n",
        "model.add(BatchNormalization())\n",
        "model.add(Conv2D(filters=96, kernel_size=(3,3) , strides=2 , padding = 'same', activation='relu'))\n",
        "model.add(BatchNormalization())\n",
        "model.add(Dropout(0.5))\n",
        "model.add(Conv2D(filters=192, kernel_size=(3,3) , padding = 'same', activation='relu'))\n",
        "model.add(Conv2D(filters=192, kernel_size=(3,3) , padding = 'same', activation='relu'))\n",
        "model.add(Conv2D(filters=192, kernel_size=(3,3) , strides=2 ,  padding = 'same', activation='relu'))\n",
        "model.add(Dropout(0.5))\n",
        "model.add(Conv2D(filters=192, kernel_size=(3,3), activation='relu'))\n",
        "model.add(Conv2D(filters=192, kernel_size=(1,1), activation='relu'))\n",
        "model.add(Conv2D(filters=53, kernel_size=(1,1)))\n",
        "model.add(GlobalAveragePooling2D(data_format='channels_last'))\n",
        "model.add(BatchNormalization())\n",
        "model.add(Activation('softmax'))\n",
        "#model.add(Dense(units=26, activation='softmax'))\n",
        "model.summary()\n"
      ],
      "metadata": {
        "id": "gJficFa_LHEU",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9a680189-6fb6-4328-8801-39a7cf1fc905"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv2d (Conv2D)             (None, 28, 28, 96)        960       \n",
            "                                                                 \n",
            " batch_normalization (BatchN  (None, 28, 28, 96)       384       \n",
            " ormalization)                                                   \n",
            "                                                                 \n",
            " conv2d_1 (Conv2D)           (None, 28, 28, 96)        83040     \n",
            "                                                                 \n",
            " batch_normalization_1 (Batc  (None, 28, 28, 96)       384       \n",
            " hNormalization)                                                 \n",
            "                                                                 \n",
            " conv2d_2 (Conv2D)           (None, 14, 14, 96)        83040     \n",
            "                                                                 \n",
            " batch_normalization_2 (Batc  (None, 14, 14, 96)       384       \n",
            " hNormalization)                                                 \n",
            "                                                                 \n",
            " dropout (Dropout)           (None, 14, 14, 96)        0         \n",
            "                                                                 \n",
            " conv2d_3 (Conv2D)           (None, 14, 14, 192)       166080    \n",
            "                                                                 \n",
            " conv2d_4 (Conv2D)           (None, 14, 14, 192)       331968    \n",
            "                                                                 \n",
            " conv2d_5 (Conv2D)           (None, 7, 7, 192)         331968    \n",
            "                                                                 \n",
            " dropout_1 (Dropout)         (None, 7, 7, 192)         0         \n",
            "                                                                 \n",
            " conv2d_6 (Conv2D)           (None, 5, 5, 192)         331968    \n",
            "                                                                 \n",
            " conv2d_7 (Conv2D)           (None, 5, 5, 192)         37056     \n",
            "                                                                 \n",
            " conv2d_8 (Conv2D)           (None, 5, 5, 53)          10229     \n",
            "                                                                 \n",
            " global_average_pooling2d (G  (None, 53)               0         \n",
            " lobalAveragePooling2D)                                          \n",
            "                                                                 \n",
            " batch_normalization_3 (Batc  (None, 53)               212       \n",
            " hNormalization)                                                 \n",
            "                                                                 \n",
            " activation (Activation)     (None, 53)                0         \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 1,377,673\n",
            "Trainable params: 1,376,991\n",
            "Non-trainable params: 682\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive/') "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Fu3u-36jgQT6",
        "outputId": "48a52c3a-9363-4058-9fa6-67df450f696d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive/\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%cd .."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Wuz2wFgBq7c7",
        "outputId": "54cf0c75-821c-4c46-d87e-5ab1e4b2fdbc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pwd\n",
        "!ls"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4oGl4sIGgre5",
        "outputId": "d293a011-0fdf-47d7-8907-17da398c059b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/\n",
            "bin\t dev   lib32  NGC-DL-CONTAINER-LICENSE\troot  sys    var\n",
            "boot\t etc   lib64  opt\t\t\trun   tmp\n",
            "content  home  media  proc\t\t\tsbin  tools\n",
            "datalab  lib   mnt    python-apt\t\tsrv   usr\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!ls"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dRtVVwyRg5f4",
        "outputId": "f0940db3-8534-4c4c-f0b1-fbb72a7dfd6a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "bin\t dev   lib32  NGC-DL-CONTAINER-LICENSE\troot  sys    var\n",
            "boot\t etc   lib64  opt\t\t\trun   tmp\n",
            "content  home  media  proc\t\t\tsbin  tools\n",
            "datalab  lib   mnt    python-apt\t\tsrv   usr\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "my_imgs = np.load('/content/drive/MyDrive/Milestone 3/new-images2.npy',  allow_pickle = True)\n",
        "letters = np.load('/content/drive/MyDrive/Milestone 3/new-labels2.npy',  allow_pickle = True)"
      ],
      "metadata": {
        "id": "R8Za2UADYu_w"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "labels = [ord(i)-97 for i in letters] #pre-processing\n",
        "my_labels = np.array(labels)\n",
        "print(len(my_labels))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gFILI6z_kg4z",
        "outputId": "07b587aa-5c96-4777-86d5-2b8bf0191828"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3639\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Lowercase vs uppercase. Is the distinction important?\n",
        "\n",
        "my_imgs =  my_imgs / 255.0 # pre-processing\n",
        "my_imgs = my_imgs.reshape(-1, 28, 28, 1)\n",
        "print(len(my_imgs))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P0LpdFj4lH67",
        "outputId": "a5b71728-0dbc-4d99-b631-556f416777b2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3639\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install tensorflow"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5ag9s5FHpd5K",
        "outputId": "3db22326-aa02-4e10-d5a5-a83555aa11c3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: tensorflow in /usr/local/lib/python3.7/dist-packages (2.9.2)\n",
            "Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (14.0.6)\n",
            "Requirement already satisfied: flatbuffers<2,>=1.12 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.12)\n",
            "Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.14.1)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from tensorflow) (57.4.0)\n",
            "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.50.0)\n",
            "Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (3.1.0)\n",
            "Requirement already satisfied: keras<2.10.0,>=2.9.0rc0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (2.9.0)\n",
            "Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (3.3.0)\n",
            "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (0.27.0)\n",
            "Requirement already satisfied: protobuf<3.20,>=3.9.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (3.19.6)\n",
            "Requirement already satisfied: tensorboard<2.10,>=2.9 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (2.9.1)\n",
            "Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (0.2.0)\n",
            "Requirement already satisfied: gast<=0.4.0,>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (0.4.0)\n",
            "Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (2.1.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from tensorflow) (21.3)\n",
            "Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.15.0)\n",
            "Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.3.0)\n",
            "Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.6.3)\n",
            "Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (4.1.1)\n",
            "Requirement already satisfied: keras-preprocessing>=1.1.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.1.2)\n",
            "Requirement already satisfied: tensorflow-estimator<2.10.0,>=2.9.0rc0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (2.9.0)\n",
            "Requirement already satisfied: numpy>=1.20 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.21.6)\n",
            "Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.7/dist-packages (from astunparse>=1.6.0->tensorflow) (0.38.4)\n",
            "Requirement already satisfied: cached-property in /usr/local/lib/python3.7/dist-packages (from h5py>=2.9.0->tensorflow) (1.5.2)\n",
            "Requirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.10,>=2.9->tensorflow) (0.6.1)\n",
            "Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.10,>=2.9->tensorflow) (1.0.1)\n",
            "Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.10,>=2.9->tensorflow) (2.23.0)\n",
            "Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.10,>=2.9->tensorflow) (1.8.1)\n",
            "Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.10,>=2.9->tensorflow) (0.4.6)\n",
            "Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.10,>=2.9->tensorflow) (2.14.1)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.10,>=2.9->tensorflow) (3.4.1)\n",
            "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.10,>=2.9->tensorflow) (5.2.0)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.10,>=2.9->tensorflow) (0.2.8)\n",
            "Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.10,>=2.9->tensorflow) (4.9)\n",
            "Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.10,>=2.9->tensorflow) (1.3.1)\n",
            "Requirement already satisfied: importlib-metadata>=4.4 in /usr/local/lib/python3.7/dist-packages (from markdown>=2.6.8->tensorboard<2.10,>=2.9->tensorflow) (4.13.0)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard<2.10,>=2.9->tensorflow) (3.10.0)\n",
            "Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.7/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.10,>=2.9->tensorflow) (0.4.8)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.10,>=2.9->tensorflow) (3.0.4)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.10,>=2.9->tensorflow) (2.10)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.10,>=2.9->tensorflow) (2022.9.24)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.10,>=2.9->tensorflow) (1.24.3)\n",
            "Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.7/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.10,>=2.9->tensorflow) (3.2.2)\n",
            "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->tensorflow) (3.0.9)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install extra-keras-datasets"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XOzrmTRglN2X",
        "outputId": "14e75000-27d7-49be-efc0-ff6d1618c10b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting extra-keras-datasets\n",
            "  Downloading extra_keras_datasets-1.2.0-py3-none-any.whl (12 kB)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.8/dist-packages (from extra-keras-datasets) (1.7.3)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.8/dist-packages (from extra-keras-datasets) (1.0.2)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.8/dist-packages (from extra-keras-datasets) (1.3.5)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.8/dist-packages (from extra-keras-datasets) (1.21.6)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.8/dist-packages (from pandas->extra-keras-datasets) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.8/dist-packages (from pandas->extra-keras-datasets) (2022.6)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.8/dist-packages (from python-dateutil>=2.7.3->pandas->extra-keras-datasets) (1.15.0)\n",
            "Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.8/dist-packages (from scikit-learn->extra-keras-datasets) (1.2.0)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.8/dist-packages (from scikit-learn->extra-keras-datasets) (3.1.0)\n",
            "Installing collected packages: extra-keras-datasets\n",
            "Successfully installed extra-keras-datasets-1.2.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import keras\n",
        "from keras import utils\n",
        "from extra_keras_datasets import emnist\n",
        "(mx_train, my_train), (mx_test, my_test) = emnist.load_data(type='letters')\n",
        "mx_train = np.asarray(mx_train)\n",
        "mx_test = np.asarray(mx_test)\n",
        "mx_train = np.reshape(mx_train,[-1,28,28,1])\n",
        "mx_test = np.reshape(mx_test,[-1,28,28,1])\n",
        "mx_train = mx_train.astype('float32')\n",
        "mx_test = mx_test.astype('float32')\n",
        "mx_train /= 255\n",
        "mx_test /= 255"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BDR4NsQVl3RE",
        "outputId": "1c76d56e-83ee-43e0-99a9-1796c4d92ee8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from http://www.itl.nist.gov/iaui/vip/cs_links/EMNIST/matlab.zip\n",
            "743900280/743900280 [==============================] - 5s 0us/step\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:root:Please cite the following paper when using or referencing this Extra Keras Dataset:\n",
            "WARNING:root:Cohen, G., Afshar, S., Tapson, J., & van Schaik, A. (2017). EMNIST: an extension of MNIST to handwritten letters. Retrieved from http://arxiv.org/abs/1702.05373\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(my_imgs, my_labels, test_size=0.25, random_state=0)"
      ],
      "metadata": {
        "id": "pfhxtzxL5AsD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(mx_train.shape)\n",
        "print(my_imgs.shape)\n",
        "print(len(mx_train[0:10000]))\n",
        "bill = mx_train[0:10000]\n",
        "john = np.append(bill, X_train, axis=0)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oSDpQ48MmQAD",
        "outputId": "62f6a4a6-6a07-4286-b96a-128924e24173"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(124800, 28, 28, 1)\n",
            "(3639, 28, 28, 1)\n",
            "10000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "john.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A5k1klIf-lqN",
        "outputId": "a52609e9-6162-422a-ac97-ca79e24b0a5f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(12729, 28, 28, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "bob = my_train[0:10000]\n",
        "bob.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ub3zsbNE_IOb",
        "outputId": "91398e37-0c4e-43b8-bbe5-9c1a762d67e3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(10000,)"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "bob[0:25]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K0DsvdWyGidL",
        "outputId": "37acebcf-1358-4bef-814b-2efd08cc09a0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([23,  7, 16, 15, 23, 17, 13, 11, 22, 24, 10, 14, 18, 21, 26, 21, 21,\n",
              "       24, 19,  5,  2, 25,  9,  5, 10], dtype=uint8)"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "my_labels[0:25]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "--dejV7tGmxA",
        "outputId": "fbf47e03-e7f9-4b38-8afe-7c35b7049b55"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([24, 13, 14, 23, 25, 12, 11,  7,  8, 10,  9,  6, 15, 16,  5,  3, 18,\n",
              "       17,  4, 21,  0, 22, 20,  1,  2])"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "my_labels.shape\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l_WZMnT-_iyc",
        "outputId": "55feb8a6-d525-4a86-a913-d47a285af698"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(3639,)"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "jill = np.append(bob, y_train)\n",
        "jill.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Zxtb8dMo_nid",
        "outputId": "cab68245-05c6-4778-c354-1f0ecffa5cf6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(12729,)"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#my_train = keras.utils.to_categorical(jill, 53)"
      ],
      "metadata": {
        "id": "rDu9FySJ_yN_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#my_train.shape"
      ],
      "metadata": {
        "id": "KzAZTh3zFcLP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#split Caoline's data and emnist-letters separately. Then append them together.\n",
        "\n",
        "#from sklearn.model_selection import train_test_split\n",
        "#X_train, X_test, y1_train, y1_test = train_test_split(john, jill, test_size=0.0, random_state=0)\n",
        "\n",
        "\n",
        "from sklearn.utils import shuffle\n",
        "\n",
        "john, jill = shuffle(john, jill)"
      ],
      "metadata": {
        "id": "hMUuqUDoDH0V"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(y_test.shape)\n",
        "print(X_test.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P0wgvVwPFmKE",
        "outputId": "128db928-ffce-47f8-fbe0-2daab0841560"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(910,)\n",
            "(910, 28, 28, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_test[:30]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TxMeq427Lmj3",
        "outputId": "91762046-97e5-494a-9c17-c225bd164cb8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([20, 14,  4, 20, 17, 13,  6, 15, 22, 19, 18, 16,  9, 22, 14, 11,  9,\n",
              "        5, 22, 10,  7,  1, 24, 14,  7, 20, 17, 17,  2, 15])"
            ]
          },
          "metadata": {},
          "execution_count": 83
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a9kUGAZbM11t",
        "outputId": "f0d07fe3-f314-4790-d440-9070a82e19c6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1456,)"
            ]
          },
          "metadata": {},
          "execution_count": 88
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.unique(y_test)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sEZS0V89O_5k",
        "outputId": "7e772031-739f-4dec-e5bd-5a22987d3c1e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n",
              "       17, 18, 19, 20, 21, 22, 23, 24, 25, 26])"
            ]
          },
          "metadata": {},
          "execution_count": 93
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#play with the epochs\n",
        "model.compile(optimizer='adam',\n",
        "              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False),\n",
        "              metrics=['accuracy'])\n",
        "history = model.fit(john, jill, epochs=10, \n",
        "                    validation_data=(X_test, y_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K8Q183TmDUim",
        "outputId": "33a7354d-40f5-4c4e-843e-aebc22f8deb6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "398/398 [==============================] - 412s 1s/step - loss: 2.7573 - accuracy: 0.3727 - val_loss: 4.6876 - val_accuracy: 0.0297\n",
            "Epoch 2/10\n",
            "398/398 [==============================] - 408s 1s/step - loss: 1.5196 - accuracy: 0.6535 - val_loss: 1.9708 - val_accuracy: 0.4385\n",
            "Epoch 3/10\n",
            "398/398 [==============================] - 413s 1s/step - loss: 1.0896 - accuracy: 0.7382 - val_loss: 1.6662 - val_accuracy: 0.5066\n",
            "Epoch 4/10\n",
            "398/398 [==============================] - 417s 1s/step - loss: 0.8907 - accuracy: 0.7779 - val_loss: 1.0959 - val_accuracy: 0.7055\n",
            "Epoch 5/10\n",
            "398/398 [==============================] - 410s 1s/step - loss: 0.7756 - accuracy: 0.8041 - val_loss: 1.1351 - val_accuracy: 0.7066\n",
            "Epoch 6/10\n",
            "398/398 [==============================] - 409s 1s/step - loss: 0.6953 - accuracy: 0.8187 - val_loss: 0.9594 - val_accuracy: 0.7297\n",
            "Epoch 7/10\n",
            "398/398 [==============================] - 410s 1s/step - loss: 0.6333 - accuracy: 0.8360 - val_loss: 1.0421 - val_accuracy: 0.7198\n",
            "Epoch 8/10\n",
            "398/398 [==============================] - 407s 1s/step - loss: 0.5813 - accuracy: 0.8477 - val_loss: 1.0237 - val_accuracy: 0.7165\n",
            "Epoch 9/10\n",
            "398/398 [==============================] - 407s 1s/step - loss: 0.5450 - accuracy: 0.8562 - val_loss: 0.9884 - val_accuracy: 0.7473\n",
            "Epoch 10/10\n",
            "398/398 [==============================] - 409s 1s/step - loss: 0.5157 - accuracy: 0.8591 - val_loss: 0.9298 - val_accuracy: 0.7473\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "acc = history.history[\"accuracy\"]; val_acc = history.history[\"val_accuracy\"]\n",
        "plt.plot(acc, label=\"Train acc - final value: %.3f\"%acc[-1])\n",
        "plt.plot(val_acc, label=\"Test acc - final value: %.3f\"%val_acc[-1])\n",
        "plt.legend(); plt.xlabel(\"Epochs\"); plt.ylabel(\"Acc\"); plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "D84EwQmlrA8W",
        "outputId": "cd4c85f6-3383-46f6-8b3e-62c01a775156"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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RWRCCI8hiaC+jDQIiIDe15odiRBCtAunXkfgcqrOwb4vjBvQ+PiZHY0wicViITs7m4qKCrNDEaLFAgICiI+Px9fXt9mfkURQW+bXYCmTmUY9XHZ2NqGhoSQkJKDkjnTChWityc/PJzs7m8TExGZ/TpqGastIg5AukHC12ZEIE1VUVBAVFSVJQLgcpRRRUVEtrs1KIqhRUQSZ38DAaeDlbXY0wmSSBISras3friSCGns/B2ul0T8ghBAeRBJBjV1p0CkB4i4zOxLhwfLz80lJSSElJYUuXboQFxfneF9VVXXRz6anp/Pggw+2U6Qt95DZOXwAABTVSURBVNFHH5GcnMy4ceMuOdaEhATOnDlzyTG11X7qe+edd0hKSiIpKYl33nmnwW22b9/OFVdcQUpKCqmpqWzevBmAdevWER4e7vi9P/30047PvPTSSwwaNIiBAwfy4osvtl3AWmuXelx22WW6zZWc1vqpTlqv+VPb71u4nD179pgdgtZa6//+7//Wzz33XJ1lFovFpGgu3cSJE/X69evbZF89e/bUeXl5HWY/teXn5+vExESdn5+vCwoKdGJioi4oKLhguwkTJuhVq1ZprbX+4osv9NixY7XWWq9du1ZPmjTpgu0zMjL0wIEDdVlZmbZYLHr8+PE6MzOzwRga+hsG0nUj5aqMGgLY8yloq1xEJi7wp892s+dEcZvuc0C3MP77lwObvf3dd99NQEAA27Zt46qrrmLWrFnMmzePiooKAgMD+ec//0m/fv1Yt24dzz//PJ9//jlPPfUUx48f5/Dhwxw/fpyHHnqowTPw+++/ny1btlBeXs6MGTP405/+BMCWLVuYN28eZWVl+Pv78+233xIUFMTjjz/OV199hZeXF/feey9z585t1s/w9NNP8+OPPzJ79mwmT57MpEmTmhXr1KlTycrKoqKignnz5nHfffc1eoxFixZx6NAhnnvOuOPt22+/TXp6Oq+++mqT+zl69Cg33XQTu3btAuD555+ntLSUp556ikOHDvG73/2OvLw8goKCWLJkCf379280jq+//poJEyYQGRkJwIQJE/jqq6+47bbb6mynlKK42PjbKioqolu3bhf9Dvfu3cvll19OUJAx48HYsWP5+OOPeeyxxy76ueaQRADGlNOdB0DsALMjEaJB2dnZbNiwAW9vb4qLi1m/fj0+Pj6sWbOGP/zh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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.evaluate(my_imgs, my_labels, verbose = 2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FkNbf-CxJewq",
        "outputId": "496a59fd-ed0b-460a-c8d9-90113c7396ff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "114/114 - 20s - loss: 0.3914 - accuracy: 0.8926 - 20s/epoch - 175ms/step\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.3913779854774475, 0.89255291223526]"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "dBUUSb5v_uRs"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
